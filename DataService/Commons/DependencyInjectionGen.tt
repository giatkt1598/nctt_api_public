<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
/////////////////////////////////////////////////////////////////
//
//              AUTO-GENERATED
//
/////////////////////////////////////////////////////////////////
using DataService.BaseConnect;
using DataService.Models.Entities;
using Microsoft.Extensions.DependencyInjection;
using DataService.Services;
using DataService.Repositories;

namespace DataService.Commons
{
    public class DependencyInjectionResolverGen
    {
        public static void Initializer(IServiceCollection services)
        {
            services.AddScoped<IUnitOfWork, UnitOfWork>();
            services.AddScoped<BaseDbContext, NCTTContext>();
        <#
        foreach (string item in GetCsvFileNames()) {
        #>

            services.AddScoped<I<#= item #>Service, <#= item #>Service>();
            services.AddScoped<I<#= item #>Repository, <#= item #>Repository>();
        <#
        }
        #>
}
    }
}
<#
 SaveOutput("DependencyInjectionResolverGen.cs");
#>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
private IEnumerable<string> GetCsvFileNames()
    {
        var path = Host.ResolvePath("..\\Models\\Entities");
        return Directory.GetFiles(path, "*.cs").Select(s => new FileInfo(s).Name.Replace(".cs","")).Where(w => !w.Contains("Context"));        
    }
#>