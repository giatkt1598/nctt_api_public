<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
/////////////////////////////////////////////////////////////////
//
//              AUTO-GENERATED
//
/////////////////////////////////////////////////////////////////
using AutoMapper;
using DataService.Models.Entities;
using DataService.Models.ViewModels;

namespace DataService.Commons
{
    public partial class AutoMapperResolver : Profile
    {
        public AutoMapperResolver()
        {
        <#
        foreach (string item in GetCsvFileNames()) {
            if (HasViewModel(item)) {
        #>
    CreateMap<<#=item#>, <#=item#>ViewModel>();
            CreateMap<<#=item#>ViewModel, <#=item#>>();
        <#
            }
        }
        #>
}
    }
}

<#
 SaveOutput("AutoMapperResolverGen.cs");
#>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
private IEnumerable<string> GetCsvFileNames()
    {
        var path = Host.ResolvePath("..\\Models\\Entities");
        return Directory.GetFiles(path, "*.cs").Select(s => new FileInfo(s).Name.Replace(".cs","")).Where(w => !w.Contains("Context"));        
    }
private bool HasViewModel(string entityName) 
    {
        var path = Host.ResolvePath("..\\Models\\ViewModels");
        return Directory.GetFiles(path, "*.cs").Select(s => new FileInfo(s).Name.Replace("ViewModel.cs","")).Any(x => x.Equals(entityName));
    }
#>