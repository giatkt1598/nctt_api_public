<#@ template language="C#" hostspecific="true"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ output extension=".cs" #>
<#
foreach (string item in GetCsvFileNames()) {
#>
/////////////////////////////////////////////////////////////////
//
//              AUTO-GENERATED
//
/////////////////////////////////////////////////////////////////
namespace DataService.Services
{
    using AutoMapper;
    using Microsoft.Extensions.Configuration;
    using DataService.BaseConnect;
    using DataService.Models.Entities;
    using DataService.Repositories;
    public partial interface I<#= item #>Service : IBaseService<<#= item #>>
    {
    }
    public partial class <#= item #>Service : BaseService<<#= item #>>, I<#= item #>Service
    {
        private readonly string ConnectionString;
        private readonly IMapper Mapper;
        public <#= item #>Service(IUnitOfWork unitOfWork, I<#= item #>Repository repository, 
            IConfiguration configuration, IMapper mapper) : base(unitOfWork, repository) {
            ConnectionString = configuration.GetConnectionString("Default");
            this.Mapper = mapper;
        }
    }
}
<#
  // End of file.
  SaveOutput(item.ToString() + "ServiceGen.cs");
}
#>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
private IEnumerable<string> GetCsvFileNames()
    {
        var path = Host.ResolvePath("..\\..\\Models\\Entities");
        return Directory.GetFiles(path, "*.cs").Select(s => new FileInfo(s).Name.Replace(".cs","")).Where(w => !w.Contains("Context"));        
    }
#>